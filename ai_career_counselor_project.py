# -*- coding: utf-8 -*-
"""AI Career Counselor Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cJ9QT3nJ7K6XC15fNY5nDqJePYPU5V8J
"""

!pip install -qU langchain
!pip install -qU langchain-openai
!pip install -qU tiktoken

!pip install -qU langchain langchain-core langchain-openai

import os, getpass

api_key = getpass.getpass("").strip()
os.environ["OPENAI_API_KEY"] = api_key

from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser


llm = ChatOpenAI(
    model="gpt-4o-mini",
    temperature=0.4
)

user_profile = {
    "skills": ["communication", "data analysis", "UI/UX design"],
    "interests": ["technology", "art", "teaching"],
    "education": "Bachelor's degree in Computer Science"
}

# ===== 1) Career Suggestion Prompt =====
career_prompt = PromptTemplate.from_template(
    """You are a career advisor.
Profile:
- Skills: {skills}
- Interests: {interests}
- Education: {education}

Task:
Recommend 3–5 realistic career paths that fit this profile.
For each career, give 1–2 lines explaining why it's a good match.
Return a concise, markdown-friendly list."""
)

career_chain = career_prompt | llm | StrOutputParser()

# ===== 2) Learning Plan Prompt =====
learning_plan_prompt = PromptTemplate.from_template(
    """You are a learning coach.
Given these suggested careers:
{career_suggestions}

Create a practical 6-week learning roadmap focusing on the two strongest options.
- Keep it concise (bulleted weekly plan).
- Include skills, 1–2 resources per week (generic, no links required), and practice outcomes."""
)

learning_plan_chain = learning_plan_prompt | llm | StrOutputParser()

# ===== 3) Motivational Prompt =====
motivation_prompt = PromptTemplate.from_template(
    """You are a motivational coach.
User profile:
- Skills: {skills}
- Interests: {interests}
- Education: {education}
Careers suggested:
{career_suggestions}

Write a short motivational note (2–3 sentences), warm, specific, and encouraging.
Avoid clichés. Make it sound personal and supportive."""
)

motivation_chain = motivation_prompt | llm | StrOutputParser()

def career_workflow(user_profile):
    # 1️ Career suggestions
    career_suggestions = career_chain.invoke({
        "skills": ", ".join(user_profile["skills"]),
        "interests": ", ".join(user_profile["interests"]),
        "education": user_profile["education"]
    })

    # 2️ Learning plan based on step 1
    learning_plan = learning_plan_chain.invoke({
        "career_suggestions": career_suggestions
    })

    # 3️ Motivation based on all info
    motivation = motivation_chain.invoke({
        "skills": ", ".join(user_profile["skills"]),
        "interests": ", ".join(user_profile["interests"]),
        "education": user_profile["education"],
        "career_suggestions": career_suggestions
    })

    return career_suggestions, learning_plan, motivation

report = f"""
=== Career Counselor Report ===

 User Inputs:
- Skills: {", ".join(user_profile["skills"])}
- Interests: {", ".join(user_profile["interests"])}
- Education: {user_profile["education"]}

 Career Suggestions:
{career_suggestions}

 6-Week Learning Plan:
{learning_plan}

 Motivational Message:
{motivation}
"""

with open("career_counselor_report.txt", "w", encoding="utf-8") as f:
    f.write(report)

print(" Report saved as career_counselor_report.txt")

"""'''You are a career advisor.
Profile:
- Skills: {skills}
- Interests: {interests}
- Education: {education}

Task:
Recommend 3–5 realistic career paths that fit this profile.
For each career, give 1–2 lines explaining why it's a good match.'''
"""

!pip install -qU langchain-core langchain-openai tiktoken


import os, getpass
os.environ["OPENAI_API_KEY"] = getpass.getpass("Enter your OpenAI API key: ").strip()

from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser

llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.4)

prompt = PromptTemplate.from_template("""
You are a learning coach.
The user currently knows: {current_skill}
They want to learn about: {target_topic}

Create a short 3-week learning plan.
Each week should have:
- main focus
- practice activity
- short motivation sentence.
""")

chain = prompt | llm | StrOutputParser()

user_input = {
    "current_skill": "basic Python programming",
    "target_topic": "data analysis"
}

response = chain.invoke(user_input)

print(response.encode('utf-8', 'ignore').decode('utf-8'))

!pip install -qU langchain-core==0.3.10 langchain-openai==0.2.6 tiktoken

import os, getpass
os.environ.pop("OPENAI_API_KEY", None)
os.environ["OPENAI_API_KEY"] = getpass.getpass("Enter your OpenAI API key: ").strip()

from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser

llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.4)

# ==== Career Prompt ====
career_prompt = PromptTemplate.from_template("""
You are a career advisor.
Profile:
- Skills: {skills}
- Interests: {interests}
- Education: {education}

Task:
Recommend 3-5 realistic career paths that fit this profile.
For each career, give 1-2 lines explaining why it's a good match.
Return a simple list.
""")

# ==== Learning Prompt ====
learning_plan_prompt = PromptTemplate.from_template("""
You are a learning coach.
Given these suggested careers:
{career_suggestions}

Create a 6-week learning roadmap for the top 2 careers.
Keep it short, organized by week, and include main focus and outcome.
""")

# ==== Motivation Prompt ====
motivation_prompt = PromptTemplate.from_template("""
You are a motivational coach.
User profile:
- Skills: {skills}
- Interests: {interests}
- Education: {education}
Careers suggested:
{career_suggestions}

Write a short motivational message (2-3 sentences) that feels personal and inspiring.
Avoid clichés.
""")

# ==== Create the chains ====
career_chain = career_prompt | llm | StrOutputParser()
learning_plan_chain = learning_plan_prompt | llm | StrOutputParser()
motivation_chain = motivation_prompt | llm | StrOutputParser()

# ==== User Data ====
user_profile = {
    "skills": ["communication", "data analysis", "UI/UX design"],
    "interests": ["technology", "art", "teaching"],
    "education": "Bachelor's degree in Computer Science"
}

# ==== Workflow ====
career_suggestions = career_chain.invoke(user_profile)
learning_plan = learning_plan_chain.invoke({"career_suggestions": career_suggestions})
motivation = motivation_chain.invoke({
    **user_profile,
    "career_suggestions": career_suggestions
})

# ==== Print results safely ====
def safe_print(title, text):
    print(title)
    print(str(text).encode("utf-8", "ignore").decode("utf-8"))
    print("\n" + "="*60 + "\n")

safe_print("=== Career Suggestions ===", career_suggestions)
safe_print("=== 6-Week Learning Plan ===", learning_plan)
safe_print("=== Motivation ===", motivation)

# ==== Save all results to a text file ====
report = f"""
=== Career Counselor Report ===

User Inputs:
Skills: {", ".join(user_profile["skills"])}
Interests: {", ".join(user_profile["interests"])}
Education: {user_profile["education"]}

Career Suggestions:
{career_suggestions}

Learning Plan:
{learning_plan}

Motivational Message:
{motivation}
"""

with open("career_counselor_report.txt", "w", encoding="utf-8") as f:
    f.write(report)

print("Report saved as 'career_counselor_report.txt'")